 
1、当前情况概述，再按项目进行表格汇总，列举数据（demo样本展示截图）
2、自动化测试实践总结 
2.1 经验方法分享
2.2 问题列举与原因分析，解决措施

以下是我总结的几点。

接口测试位于功能测试前，发现bug早修改早成本低。
接口测试的参数会比开发的参数更丰富，得到的结果更快更多。
能发现大部分接口未校验的参数，省去我们功能测试输入太多数值。
准备测试数据方便，我们需要的测试数据可以通过接口来生成，再也不用数据库添加。
接口存储数据到数据库，同时也做了数据库存数据的校验，一举两得。
--------------------- 
作者：wanglong12341 
来源：CSDN 
原文：https://blog.csdn.net/wanglong12341/article/details/83751924 
版权声明：本文为博主原创文章，转载请附上博文链接！
自动化测试介绍
自动化测试(Automated Testing)，是指把以人为驱动的测试行为转化为机器执行的过程。实际上自动化测试往往通过一些测试工具或框架，编写自动化测试用例，来模拟手工测试过程。比如说，在项目迭代过程中，持续的回归测试是一项非常枯燥且重复的任务，并且测试人员在每天重复劳动的工作之下，也丝毫得不到成长。此时开展自动化测试就能够帮助测试人员从重复、枯燥的手工测试中解放出来，提高测试效率，缩短回归测试时间。一般来说，自动化测试通常都会跟持续集成系统（比如Jenkins）配合使用。
但在自动化实践过程中，往往会发现理想和现实之间的差距很大。自动化测试的坑，主要体现在以下几方面：

自动化测试并不能取代手工测试，它只能替代手工测试中执行频率高、机械化的重复步骤；；
自动化测试远比手工测试脆弱，用例维护成本很高；
不能指望自动化测试去发现更多新的BUG，自动化测试能发现的缺陷远远比手工测试少；
自动化测试用例的开发工作远大于单次的手工测试，产出价值往往在于长期的回归测试，短期内发挥的作用可能不明显；
实行自动化测试的初期，用例开发效率通常都很低，并且有很大概率后期在功能没有的变化的情况下重构用例；
自动化测试的效率很大程度上依赖自动化测试用例的设计以及实现质量，不稳定的自动化测试用例比没有自动化更糟糕；

希望借助自动化流程解决的问题

测试时间紧张，手工测试可能覆盖不全，容易错过某些边界情况；
模块间强耦合时，单纯从页面进行测试时，比较难深入的发现问题；
回归测试时，需要投入较大的人力/工时；
实现手工测试无法达成的测试任务；
通过编写测试用例，加深对业务/数据的认知，有助于下阶段迭代中发现隐藏的问题；

什么样的项目适合自动化测试？

需求稳定，不会频繁变更的系统或模块；
研发和维护周期长，需要频繁执行回归测试；
单个用例需要在多种平台上执行多次，如浏览器兼容性测试、手机系统版本测试等；
通过手工测试无法实现的测试活动，如压力测试；
被测系统的开发流程比较规范，如GUI自动化测试中，控件的命令遵循制定的规则，接口测试需要提供最新新文档；

做自动化测试需要具备的能力

拥有编码能力
至少要熟悉自动化工具/框架的代码语言，最好有一定的编码能力，同时代码逻辑要清晰，否则不仅不能保证用例的逻辑性、业务性与健壮性等要素，也不能保证效率；
熟悉被测系统；
熟悉被测系统对任何测试人员来说都是最起码的要求；
掌握一个自动化测试框架/工具；
可以根据所掌握的代码，学习一门自动化测试的框架，如 Selenium/Appium/Robot Framework/UI Recorder/TestNG等；
不断学习，善于学习，知其然知其所以然；
“落后就要挨打。”

自动化用例一般在哪个阶段完成
一般落后于新功能的手工测试阶段，可以在手工用例执行完成或功能上线后，再去补充自动化的用例。
自动化不是跟着新需求走，而是测变化的东西对不变东西的影响，一定不要做为了自动化而自动化的工作。
分层自动化测试
在理解分层自动化之前，我们先看一下经典的测试金字塔。
UI层：界面自动化测试。可以看出它的价值最小，它最接近用户真实场景，也容易发现问题，但它的实现成本最高且太容易受外部依赖，容易影响脚本成功率。总体来说，适当的界面自动化测试是有必要的，但是没有必要在UI层投入太多；
Service层：接口自动化测试。它的价值居中，覆盖大多数主要的接口是比较合适的。这一层要求测试人员对系统的结构和系统间的调度非常清楚，同时要了解接口逻辑关系，否则接口测试代码很容易遗漏一些异常场景；
Unit层：单元测试。最有价值的测试，但是对测试人员要求比较高，一般由开发人员完成，否则只能采用结对编程。

通常来说，手工测试是最基本的，可以做到90%以上，而对于自动化测试来说，它更像是一件"防弹衣"，用来防护身体的主要部位。有人认为自动化率提高了，就可以节省人力，这实际是非常片面的，因为提高自动化率，意味着需要投入更大的人力在维护的成本上。因为系统的需求是在不断变化的，每一个变化都会导致自动化测试用例需要更新调整。
所以，自动化测试做到什么样才算好，也要结合上面的测试金字塔来分析。对于UI层面的自动化测试，保证少量必要的主流程即可，切勿在这一层面将自动化测试的"防弹衣"变成臃肿的"宇航服"；Service层面的接口自动化测试，可以考虑覆盖大部分的流程；Unit层面的单测，做到100%是最好的，即使有需求变化，一般也很少影响到已有的用例。一般来说，单元测试可以发现80%的缺陷。
设计用例的基本原则
基本原则

自动化测试用例的范围应该是相对核心的业务内容，即覆盖主体功能的核心测试点和重复执行率较高的模块；
在测试脚本和被测代码都保持不变的情况下，测试用例的结果应该是稳定的，这一点非常重要，在第二篇个人总结中会提到GUI测试的稳定性问题；
除非是必要的情况，否则任何用例都应当避免做持久化的操作，以保证环境始终是干净的；
Once Written, Run Anytime as Desired ；
不是所有的手工测试用例都可以使用自动化测试来实现，自动化测试替代不了手工测试，两者的有效结合是保证项目质量的关键。
回归测试场景中，测试用例的选择一般以正向为主，逆向为辅；

用例设计原则（基于Robot框架)
保持Case的独立性
通常来说，一个Test Suite下包含了一组相近的或者有关联的Test Cases。而每一个 Test Case 应该只测试一种场景，根据case复杂程度，不同场景同样可大可小，可以是某个单元的测试，也可以是端到端的测试(E2E)，当然也有特殊的写法比如工作流测试和数据驱动。
Case的独立性有哪些需要关注的点呢?
首先Test Suite内的Cases在执行时不应该相互影响，意思是说当我们有随机的跑其中某个Case或乱序的跑这些Cases时，测试的结果都应该是准确的。Suite level和Directory level同样要注意独立性的问题。系统较为庞杂时，可能会将数百上千的Cases放在一起跑，Robot框架 本身不会规定Case执行的顺序，所以从某种程度上来说同一层级的Cases是随机执行的。很典型的情况就是，测试用例在本地调试时怎么跑怎么过，放到Server上所有Cases一起跑的时候就会Fail,还可能是偶发的，这种情况下就很可能是由于其他Case的痕迹影响到了它，查找问题的根源往往比较耗时。
保持Case的可迁移性
Case的可迁移性主要考虑三点 : Case对执行环境的依赖 ;  Case对外部设备的依赖;Case对测试对象的依赖。
Case对执行环境的依赖
尽量减少对执行环境的依赖。举一个例子，你在本地PC上使用rf框架编写、调试用例后，上传到Git，然后你的领导可能会拉取你的用例在他的本地运行，随后又被部署到持续集成服务器上。所以你编写的用例时就要尽量避免使用不同平台的库或者shell命令。
再举个例子，如果你因为业务需要而修改了测试库源码的话，此时不管是组内其他人还是CI服务器，肯定都会运行失败，这种情况该怎么解决呢？这里提供两个解决方法：

将修改后的库做成测试库，上传到Git或者Pypi，对方可以通过pip安装更新；
使用robotremoteserver做一个共享库放在远程主机上，具体请参考虫师的文章；

Case对外部设备的依赖
有时为了业务测试需要，我们会引入一些外部设备来辅助测试，外部设备可能会持续升级或者更换，在编写用例时我们就需要考虑如何用一套Case更好的兼容这些测试设备。比如可以将外部设备的操作从测试用例中抽离出去，封装成测试库或关键字；
Case对测试对象的依赖
如果测试对象是一个软件平台，软件平台通常需要适配多种的设备，而设备的硬件配置可能是多种多样的：CPU、内存、组件的性能和数量都可能不同。对测试对象的依赖不仅要考虑在不同设备上的可执行性，重点还要考虑测试覆盖率。由于设备组件的增多你的用例可能无法覆盖到这些组件，或者捕捉不到某个性能瓶颈，这样测试结果的可靠性也大打折扣。
提升Case执行效率
不同的case执行时间相距甚远，短则数秒长则持续数天。数秒钟的简单功能测试用例和耗时数天的稳定性测试用例本身是没有什么可比性的。但是我当我们放眼某一个或者某一组case时，我们就需要重视Case的执行效率。不论是敏捷流程还是持续集成都讲究快速的反馈，开发人员能在提交代码后快速的获得测试结果反馈，测试人员能在最短的时间内执行更大范围的测试覆盖，不仅能提高团队的工作效率，也可增强团队的信心。
以使用Robot为例，在编写用例时可以通过以下方面来提高用例的执行效率。
1.如果有对执行条件的检查，若检查失败，则尽快退出执行；
2.将数据准备或环境清除等工作抽取成关键字放到更高的层级中,，抽取时可能需要做一些组合, 但不允许出现重复的建删操作；
3. 用例中尽量少的出现sleep，建议用"wait until ..."来代替；
4. 可以采用并发执行用例的方法来提升效；
自动化用例编写规范
命名规范
Keyword命名
第一个单词应以小写字母作为开头，后面的单词则用大写字母开头。  如：getProjectId,  connectDB
常量命名
常量的名字应该都使用大写字母，并且指出该常量完整含义。如果一个常量名称由多个单词组成，则应该用下划线来分割这些单词。  如：MAX_CHAR_LENGTH
参数命名
参数的命名规范和方法的命名规范相同，请在尽量保证参数名称为一个单词的情况下使参数的命名尽可能明确。如：{investorName}

作者：Rethink
链接：https://www.jianshu.com/p/143d592933ae
来源：简书
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。

GUI测试的稳定性问题
关于这个问题，最典型的情景就是：同样的测试用例，在同样的测试执行环境下，测试的结果有时是Success，有时是Fail，这严重降低了GUI测试的可信性，同时也是GUI层面的自动化测试位于金字塔最顶端的原因之一。
在实际的项目过程中，GUI测试几乎不可能做到100%稳定，根据我的经验，如果能够做到 90% 以上的稳定性，就已经非常不错了，这需要整个产品技术团队的共同努力才有希望达成。
要提高 GUI 测试稳定性，首先我们需要知道到底是什么原因引起的不稳定。我们必须找出尽可能多的不稳定因素，然后找到每一类不稳定因素对应的解决方案。我列举了几种常见的造成GUI测试不稳定的因素，如下：

非预计的弹出弹出对话框
在用例执行过程中，操作系统或被测系统可能会突然弹出预期范围之外的对话框，GUI自动化测试有可能就会因此而失败。


解决方案：异常场景恢复模式？无界面GUI自动化测试？


页面控件属性的细微变化
如果页面控件的属性发生了变化，哪怕只是细微的变化，也必定会导致测试脚本的元素定位失败。这可以说是GUI自动化测试最大的痛点。
目前，一些商用 GUI 自动化测试工具，比如 UFT(原QTP)，已经集成了模糊匹配的功能。通常情况下，只需要启用“模糊匹配”选项即可。如果某个对象的定位是通过模糊匹配完成的，那么，测试报告中将会显示该信息，明确告知此次对象识别是基于模糊匹配完成的，因为 GUI 自动化工具并不能保证每次模糊匹配都一定正确。


解决方案：元素定位采用模糊匹配技术？


随机的页面延迟造成控件识别失败
随机的页面延迟，也是 GUI 测试防不胜防的。既然是随机的，也就是说我们没有办法去控制它，解决办法是加入重试（retry）机制。重试机制是指，当某一步 GUI操作失败时，框架会自动发起重试。对于Robot Framework+SeleniumLirary，可以使用有wait until系列的关键字（智能等待），尽量少的使用sleep。

Wait For Condition
Wait Until Element Contains
Wait Until Element Does Not Contain
Wait Until Element Is Enabled
Wait Until Element Is Not Visible
Wait Until Element Is Visible
Wait Until Page Contains
Wait Until Page Contains Element
Wait Until Page Does Not Contain
Wait Until Page Does Not Contain Element


解决方案：重试机制retry


测试数据问题
测试数据问题，也是造成 GUI 自动化测试不稳定的一个重要原因。比如，测试用例所依赖的数据被其他用例修改了。要解决此类的问题，就要回归到第一篇中所谈到的内容，必须要保证用例之间的独立性和尽量减少对执行环境的依赖。Robot框架本身不会规定Case执行的顺序，所以从某种程度上来说同一层级的Cases是随机执行的。很典型的情况就是，测试用例在本地调试时怎么跑怎么过，放到Server上所有Cases一起跑的时候就会Fail,还可能是偶发的，这种情况下就很可能是由于其他Case的痕迹影响到了它，查找问题的根源往往比较耗时。


解决方案：保证用例之间的独立性和尽量减少对执行环境的依赖

界面自动化测试，它最接近用户真实场景，也容易发现问题，但它的实现成本最高且太容易受外部依赖，容易影响脚本成功率。总体来说，适当的界面自动化测试是有必要的，但是真的没有必要在UI层投入太多精力。
【To be continued...】

作者：Rethink
链接：https://www.jianshu.com/p/76555a67a0bf
来源：简书
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。

自动化测试可以将产品的知识固化到脚本中，以降低测试人员流动对项目造成的影响。
我个人有个推论：自动化测试的优势都是自动化测试成功完成得到的结论，而自动化测试的劣势才是自动化项目立项的基础。
4)遇到错误时，需要仔细的看日志，很多问题都是因为看日志的不仔细导致没能查出原因。

我想应该有很多测试人员应该有这样的疑虑，自动化测试要怎么去做，现在我把自己的一些学习经验分享给大家，希望对你们有帮助，有说的不好的地方，还请多多指教！

对于测试人员来说，不管进行功能测试还是自动化测试还是性能测试都是需要编写测试用例，所以我们必须先要了解清楚手工测试用例与自动化测试用例的一些特点，才能更好的开展自动化测试工作

第一篇——自动化测试用例设计

1.1手工测试用例和自动化测试用例

手工测试用例是针对功能测试人员的，而自动化测试用例是针对自动化测试用例框架或工具的。

（1）手工测试用例特点

较好的异常处理能力，能通过人为的逻辑判断校验当前步骤是否正确实现；

人工执行用例具有一定步骤跳跃性；

人工测试步步跟踪，能够细致定位问题；

主要用来发现功能缺陷；

（2）自动化测试用例特点

执行对象是脚本，任何一个盘算都需要编码定义；

用例步骤之间关联性强；

主要用来保证产品主体功能正确和完整，让测试人员从繁琐重复的工作中解脱出来；

目前自动化测试阶段定位在冒烟测试和回归测试

注意：通过对比发现，自动化测试不能完全替代手工测试，自动化测试的目的仅仅在于让测试人员从繁琐重复的测试流程中解脱出来，把更多的时间和精力放在更有价值的测试中，例如探索性测试。

（3）自动化测试用例注意事项

1、不是所有手工测试用例都要转为自动化测试用例

2、考虑到脚本开发成本，不要选择流程太复杂的用例，如果有必要，可以考虑把流程拆分成多个用例来实现脚本

3、选择的用例最好可以构建场景。例如，一个功能模块，分成多个用例，多个用例使用同一个场景，这样的好处在于方便构建关键字测试模型。

4、选择用例可以带有目的性。例如，这部分用例作冒烟测试等，当然，会存在重叠关系，如果当前用例不满足需求，那么唯有修改用例来适应脚本和需求

5、选取的用例可以是主体流程，这部分用于冒烟测试（https://baike.so.com/doc/6504729-6718449.html，如果不了解专业术语，下来要花费功夫哦）

6、选取的测试用例可以是你认为重复执行，很猥琐的部分。例如字段验证、提示信息验证之类，这部分适用于回归测试

7、自动化测试也可以用来做配置检查、数据库检查。这些可能超过了手工用例，但也算用例拓展的一部分，项目负责人可以有选择的增加

8、平时在手工测试时，如果需要构造一些复杂的数据或重复一些简单的机械式动作，则告诉脚本，让它来帮你，或许你的效率会因此提高。



1.2自动化测试类型

1、测试静态内容

静态内容测试是最简单的测试，用于验证静态的、不变的ui元素的存在性，例如：

（1）每个页面都有预期的页面标题，这可以用来验证链接指向一个预期页面

（2）应用程序的主页包含一个应该在页面顶部的图片

（3）网站的每个页面是否包含一个页脚区域来显示公司的联系方式、隐私政策以及商标信息等

（4）每一页的标题文本都使用<h1>标签吗？每个页面是否都有正确的头部文本

你可能需要（也可能不需要）对页面内容进行自动化测试。如果你的网页是不易受到影响的，则手工对内容进行测试就足够了。假设你的应用文件的位置移动了，则内容测是就非常有价值

2、测试链接

web站点的一个常见错误为失效的链接或链接指向无效页。链接测试涉及各个链接和验证预期的页面是否存在。如果静态链接不经常更改，则手动测试就足够了。但是，如果你的网页设计师经常修改链接或者文件不时被重定向，则链接测试应该实现自动化。

3、功能测试

在你的应用程序中，需要测试应用的特定功能，需要一些类型的用户输入，并返回某种类型的结果，通常一个功能测试涉及多个页面，一个基于表单的输入页面，其中包含若干输入字段，提交和取消操作，以及一个或多个响应页面。用户输入可以通过文本输入域、复选框、下拉列表，或任何其他浏览器所支持输入。

功能测试通常是需要自动化测试的 最复杂的测试类型，但通常也是最重要的。典型的测试是登陆，注册网站账户用户账户操作、账户设置变化、复杂的数据检索操作等等。功能测试通常对应着你的应用程序的描述应用特性或设计的使用场景。

4、测试动态元素

通常网页元素都有唯一的标识符，用于唯一的定位该网页的元素。通常情况下，唯一标识符用html标记的id属性或name属性来实现。

5、Ajax的测试

Ajax是一种支持以及动态改变用户界面元素的技术。页面元素可以动态更改，但不需要浏览器重新载入页面，如动画，RSS源、其他实时数据更新等。

Ajax有无数更新网页上元素的放大，最简单的方式是在Ajax驱动的应用程序中，数据可以从应用服务器检索，然后显示在页面上，而不需要重新加载整个页面，只有一小部分的页面，或者只有元素本身重新被加载。

最后跟大家分享一下自动化测试用例编写原则：

1.3自动化测试用例编写原则

1.一个用例为一个完整的场景，从用户登录系统到 最终退出并关闭浏览器

2.一个用例只验证一个功能点，不要试图在用户登录系统后把所有功能都验证一遍

3.尽可能少的编写逆向逻辑用例。一方面因为逆向逻辑的用力很多（例如，手机号输错有几十种情况），另一个方面自动化脚本本身比较脆弱，复杂的逆向逻辑用例实现起来比较麻烦且容易出错。

4.用例与用例之间尽量避免产生依赖

5.一条用例完成测试之后需要对测试场景进行还原，以免影响其他用例的执行
--------------------- 
作者：gracesyuan 
来源：CSDN 
原文：https://blog.csdn.net/qq_31551211/article/details/77481949 
版权声明：本文为博主原创文章，转载请附上博文链接！
